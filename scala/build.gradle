version = "0.1"
description = "Scala Projects"

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath 'cz.alenkacz:gradle-scalafmt:1.10.0'
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.3+'
    }
}

subprojects {
    repositories {
        mavenCentral()
        jcenter()
        maven { url "http://oss.sonatype.org/content/repositories/snapshots/" }
    }

    apply plugin: 'scala'
    apply plugin: 'scalafmt'
    apply plugin: 'java-library'
    apply plugin: 'com.github.johnrengelman.shadow'

    dependencies {
        api group: 'org.scala-lang', name: 'scala-library', version: scalaVersion + ".+"

        testImplementation group: 'org.scalatest', name: "scalatest_" + scalaVersion, version: '3.+'
        testImplementation group: 'org.scalacheck', name: "scalacheck_" + scalaVersion, version: '1.+'
        testCompileOnly group: 'junit', name: 'junit', version: '4.12'
        testCompileOnly group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    }

    // Give test dependencies access to compileOnly dependencies to emulate providedCompile.
    // Otherwise, tests won't compile.
    // https://discuss.gradle.org/t/compileonly-dependencies-are-not-available-in-tests/15366/7
    configurations {
        testImplementation.extendsFrom compileOnly
    }

    shadowJar {
        // See https://github.com/johnrengelman/shadow/issues/107
        zip64 true
    }

    task scalaTest(dependsOn: ['testClasses'], type: JavaExec) {
        main = 'org.scalatest.tools.Runner'
        args = ['-R', 'build/classes/scala/test', '-o']
        classpath = sourceSets.test.runtimeClasspath
    }

    // I would prefer compileScala.dependsOn but that results in an
    // arcane Maven dependency resolution problem.
    test.dependsOn scalafmtAll
    test.dependsOn scalaTest
}
