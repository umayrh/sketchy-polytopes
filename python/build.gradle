version = "0.1"
description = "Python Projects"

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "gradle.plugin.com.linkedin.pygradle:pygradle-plugin:0.9.11"
    }
}

subprojects {
    apply plugin: "idea"
    apply plugin: 'com.linkedin.python'
    apply plugin: 'com.linkedin.python-sdist'
    apply plugin: 'com.linkedin.python-cli'

    idea {
        module {
            sourceDirs += file('src')
            testSourceDirs += file('test')
        }
    }

    python {
        details {
            pythonVersion = '3.7'
        }
        // Sphinx-1.8.1.dist-info/METADATA:Requires-Dist: enum34; (python_version<"3")
        // enum34-1.1.6 causes the build to fail on Python 3. These versions are old but
        // the latest ones available at https://linkedin.jfrog.io/linkedin/pypi-external/pypi/
        // as of 2020-05-25.
        forceVersion('pypi', 'flake8', '3.7.9')
        forceVersion('pypi', 'Sphinx', '2.2.1')
    }

    dependencies {
        python ('pypi:flake8:3.7.9') {
            exclude module: 'functools32'
        }
    }

    repositories {
        pyGradlePyPi()
        ivy {
            // Can't easily use a "global" local repo since
            // pivy-importer clobbers pre-existing libraries, which
            // could possibly create build problems for other packages
            // when builds are running in parallel.
            url "build/local-ivy-repo"
            layout('pattern') {
                ivy "[organisation]/[module]/[revision]/[module]-[revision].ivy"
                artifact "[organisation]/[module]/[revision]/[artifact]-[revision](-[classifier]).[ext]"
                m2compatible true
            }
        }
    }

    // Workaround due to PyGradle's lack of support for native PyPi repos
    task pipInstallRequirements(type: Exec) {
        commandLine "bash", "-c", "source build/venv/bin/activate && pip3 install -r requirements.txt && deactivate"
    }

    task pipInstallRequests(type: Exec) {
        commandLine  "pip3", "install", "--user", "requests"
    }

    // TODO: Offline test requires  gradle check -x getRequirements since
    // we're clobbering the local Ivy repo every time
    task getRequirements(type: Exec) {
        dependsOn pipInstallRequests
        commandLine "python3", "../etc/get_requirements.py", "build/local-ivy-repo"
        standardOutput = new ByteArrayOutputStream()
        ext.output = {
            return standardOutput.toString()
        }
    }

    task printReq {
        dependsOn getRequirements
        println tasks.getRequirements.output()
    }

    task printExternalDependencies {
        // it would be nice for setup.py to reference these
        // dependencies, and, separately, to use `pip freeze`
        // to write a requirements.txt
        doLast {
            println(project.configurations.python.allDependencies)
        }
    }

    installBuildRequirements.dependsOn getRequirements
}
